

/**
 * Flex panel header with 45deg "cut corners"
 *
 * @param  {number}  $borderNum         The size of the border
 * @param  {hex}     $borderColor       The border color
 * @param  {hex}     $backgroundColor   The background color
 * @param  {decimal} $backgroundOpacity The background color opacity
 * @param  {number}  $paddingNum        The panel padding
 */
@mixin flex-panel-header($borderNum, $borderColor, $backgroundColor, $backgroundOpacity, $paddingNum) {
  $innerPaddingNum: $paddingNum / 2;
  display: flex;

  .corner-fill {
    flex: 1;
    background-color: rgba($backgroundColor, $backgroundOpacity);
    border-top: $interfaceBorder;

    &:not(.full) {
      border-right: $interfaceBorder;
    }
  }

  .left-corner {
    @include angled-corner(true, true, $borderNum, $borderColor, $backgroundColor, $backgroundOpacity, $paddingNum);
  }

  .right-corner {
    @include angled-corner(true, false, $borderNum, $borderColor, $backgroundColor, $backgroundOpacity, $paddingNum);
  }

  .outer-corner-fill {
    width: 15%;
    border-top: $interfaceBorder;
    background-color: rgba($backgroundColor, $backgroundOpacity);

    &:first-child {
      border-left: $interfaceBorder;
    }

    &:last-child {
      border-right: $interfaceBorder;
    }
  }

  .inner-corner-fill {
    flex: 1;
    border-bottom: $interfaceBorder;
  }

  .left-inner-corner {
    @include angled-inner-corner(true, true, $borderNum, $borderColor, $backgroundColor, $backgroundOpacity, $innerPaddingNum);
  }

  .right-inner-corner {
    @include angled-inner-corner(true, false, $borderNum, $borderColor, $backgroundColor, $backgroundOpacity, $innerPaddingNum);

    + .outer-corner-fill {
      border-right: $interfaceBorder;
    }
  }

  .inner-corner-fill:before {
    bottom: to-px(-($innerPaddingNum + $borderNum));
  }

  .left-inner-corner, .right-inner-corner {
    &:before {
      bottom: to-px(-$innerPaddingNum);
    }
  }

  .inner-corner-fill, .left-inner-corner, .right-inner-corner {
    position: relative;
    margin-bottom: to-px($innerPaddingNum);

    &:before {
      content: "";
      position: absolute;
      display: block;
      background-color: rgba($backgroundColor, $backgroundOpacity);
      left: 0;
      height: to-px($innerPaddingNum);
      width: 100%;
    }
  }
}

/**
 * Flex panel content with no top or bottom borders
 *
 * @param  {number}  $borderNum         The size of the border
 * @param  {hex}     $borderColor       The border color
 * @param  {hex}     $backgroundColor   The background color
 * @param  {decimal} $backgroundOpacity The background color opacity
 * @param  {number}  $paddingNum        The panel padding
 */
@mixin flex-panel-content($borderNum, $borderColor, $backgroundColor, $backgroundOpacity, $paddingNum) {
  background-color: rgba($backgroundColor, $backgroundOpacity);
  border-left: to-px($borderNum) solid $borderColor;
  border-right: to-px($borderNum) solid $borderColor;
  padding-right: to-px($paddingNum);
  padding-left: to-px($paddingNum);
  overflow: hidden;
}

/**
 * Flex panel header with 45deg "cut corners"
 *
 * @param  {number}  $borderNum         The size of the border
 * @param  {hex}     $borderColor       The border color
 * @param  {hex}     $backgroundColor   The background color
 * @param  {decimal} $backgroundOpacity The background color opacity
 * @param  {number}  $paddingNum        The panel padding
 */
@mixin flex-panel-footer($borderNum, $borderColor, $backgroundColor, $backgroundOpacity, $paddingNum) {
  $innerPaddingNum: $paddingNum / 2;
  display: flex;

  .corner-fill {
    flex: 1;
    height: rem-calc($paddingNum);
    background-color: rgba($backgroundColor, $backgroundOpacity);
    border-bottom: to-px($borderNum) solid $borderColor;

    &:not(.full) {
      border-left: to-px($borderNum) solid $borderColor;
    }
  }

  .left-corner + .corner-fill {
    border-left: none;
  }

  .left-corner {
    @include angled-corner(false, true, $borderNum, $borderColor, $backgroundColor, $backgroundOpacity, $paddingNum);
  }

  .right-corner {
    @include angled-corner(false, false, $borderNum, $borderColor, $backgroundColor, $backgroundOpacity, $paddingNum);
  }

  .outer-corner-fill {
    width: 15%;
    border-bottom: $interfaceBorder;
    background-color: rgba($backgroundColor, $backgroundOpacity);

    &:first-child {
      border-left: $interfaceBorder;
    }

    &:last-child {
      border-right: $interfaceBorder;
    }
  }

  .inner-corner-fill {
    flex: 1;
    border-top: $interfaceBorder;
  }

  .left-inner-corner {
    @include angled-inner-corner(false, true, $borderNum, $borderColor, $backgroundColor, $backgroundOpacity, $innerPaddingNum);
  }

  .right-inner-corner {
    @include angled-inner-corner(false, false, $borderNum, $borderColor, $backgroundColor, $backgroundOpacity, $innerPaddingNum);
  }

  .inner-corner-fill:before {
    top: to-px(-($innerPaddingNum + $borderNum));
  }

  .left-inner-corner, .right-inner-corner {
    &:before {
      top: to-px(-$innerPaddingNum);
    }
  }

  .inner-corner-fill, .left-inner-corner, .right-inner-corner {
    position: relative;
    margin-top: to-px($innerPaddingNum);

    &:before {
      content: "";
      position: absolute;
      display: block;
      background-color: rgba($backgroundColor, $backgroundOpacity);
      left: 0;
      height: to-px($innerPaddingNum);
      width: 100%;
    }
  }
}
